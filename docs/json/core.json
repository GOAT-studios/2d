{
    "title": "2D Core",
    "intro": "The core of 2D consists of just one object (in the global scope): `Game`. Game is javascript contstructor, so with `new Game(...)` you can create as many Games as you wish on a sigle page, even with completely different options.<br/>Game has just a few methods and variables, mainly for the game loop, starting and stopping, and managing plugins. That's the true power and beauty of 2D: it consists of a very small core, with all the functionality added with plugins, like `Draw`, `Collisions` etc. There are a few basic plugins, in `src/plugins`.",
    "main": {
        "name": "Game",
        "type": "constructor",
        "description": "The main Game constructor",
        "arguments": [
            {
                "name": "options",
                "type": "Object",
                "default": "{}",
                "description": "An object containing some options. All possible keys can be found in `options.md`. For no options, use an empty Object."
            },
            {
                "name": "plugins",
                "type": "Object",
                "default": "{}",
                "optional": true,
                "description": "An object containing some plugins to be added to the Game. Keys are plugin type (e.g. `Colliders`), values are the plugins (as passed to `Game.plugin()`)."
            }
        ],
        "children": [
            {
                "name": "Loop",
                "type": "method",
                "description": "The main Game loop. Called by the animationFrame on every frame. Does some chores and executes the Update and Draw functions of the different Categories."
            },
            {
                "name": "start",
                "type": "method",
                "description": "Start the Game.",
                "return": "Game",
                "arguments": [
                    {
                        "name": "scene",
                        "type": "integer|string|Scene",
                        "optional": true,
                        "description": "An integer or string referencing a scene. This will be passed to `Game.world.load()`"
                    }
                ]
            },
            {
                "name": "stop",
                "type": "method",
                "description": "Stop the Game. Calls Reset; to stop the Game temporarily, consider using `Game.pause()` instead.",
                "return": "Game"
            },
            {
                "name": "pause",
                "type": "method",
                "description": "Pause the Game. After pause, the Game can easily be resumed with `Game.start()`.",
                "return": "Game"
            },
            {
                "name": "init",
                "type": "method",
                "description": "Initialise the Game. This loads the first scene, initialises the categories and plugins, etc.",
                "return": "Game",
                "arguments": [
                    {
                        "name": "scene",
                        "type": "integer|string|Scene",
                        "optional": true,
                        "description": "An identifier for a Scene or a Scene. This will be passed to `Game.world.load()`"
                    }
                ]
            },
            {
                "name": "reset",
                "type": "method",
                "description": "Reset the Game, i.e. reset it to a clean state, so a Scene can be loaded and started without glitches. This involves resetting positions, timers, etc.",
                "return": "Game"
            },
            {
                "name": "domElement",
                "type": "DOMElement",
                "description": "The DOM element on which the Game will be drawn. Add this to the DOM to view the Game; otherwise, the Game will run as normal, but, as the element is not in the DOM, you won't see anything. This can be a `Canvas`, an `SVG` element... Provided by the Draw plugin."
            },
            {
                "name": "context",
                "type": "CanvasContext2d",
                "description": "If `Game.domElement` is an HTML5 Canvas element, `Game.context` will contain the Canvas 2D context."
            },
            {
                "name": "animationFrame",
                "type": "animationFrame",
                "description": "The next animationFrame of the Game. Can be cancelled with `Game.cancelAnimationFrame(Game.animationFrame)`. Generated with `Game.requestAnimationFrame()`."
            },
            {
                "name": "requestAnimationFrame",
                "type": "method",
                "description": "Request a new animationFrame. Used by the Game loop.",
                "return": "animationFrame"
            },
            {
                "name": "cancelAnimationFrame",
                "type": "method",
                "description": "Cancel an animationFrame."
            },
            "categories",
            "colliders",
            "utils",
            "worlds",
            "camera",
            "draw",
            "sound",
            "assets",

            "Vector"
        ]
    }
}